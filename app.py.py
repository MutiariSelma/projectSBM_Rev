# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EK-IXg2E6UKBiW1yG2dHAG0ZT5N2HPow
"""

import streamlit as st
import pandas as pd
import numpy as np

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler

from xgboost import XGBRegressor
from lightgbm import LGBMRegressor

@st.cache_data
def load_and_prepare_data():
    df = pd.read_csv('MentalHealthSurvey.csv')

    sleep_map = {'2-4 hrs': 0, '4-6 hrs': 1, '7-8 hrs': 2}
    sports_map = {'No Sports': 0, '1-3 times': 1, '4-6 times': 2, '7+ times': 3}

    df['avg_sleep'] = df['average_sleep'].map(sleep_map)
    df['sports'] = df['sports_engagement'].map(sports_map)

    features = ['academic_workload', 'academic_pressure', 'future_insecurity',
                'financial_concerns', 'social_relationships', 'isolation',
                'avg_sleep', 'sports']

    X = df[features]
    y = df['depression']

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return X, X_scaled, y, scaler, features

# Load data dan training semua model
X, X_scaled, y, scaler, features = load_and_prepare_data()

# Training semua model
lr = LinearRegression()
lr.fit(X_scaled, y)

rf = RandomForestRegressor(random_state=42)
rf.fit(X, y)

xgb = XGBRegressor(random_state=42, verbosity=0)
xgb.fit(X, y)

lgbm = LGBMRegressor(random_state=42, verbose=-1)
lgbm.fit(X, y)

# Streamlit UI
st.title("Prediksi Skor Depresi Mahasiswa")
st.write("Masukkan nilai untuk fitur-fitur berikut:")

input_data = {}
for feat in features:
    if feat == 'avg_sleep':
        options = {'2-4 hrs': 0, '4-6 hrs': 1, '7-8 hrs': 2}
        selected = st.selectbox("Rata-rata tidur", list(options.keys()))
        input_data[feat] = options[selected]
    elif feat == 'sports':
        options = {'No Sports': 0, '1-3 times': 1, '4-6 times': 2, '7+ times': 3}
        selected = st.selectbox("Frekuensi olahraga", list(options.keys()))
        input_data[feat] = options[selected]
    else:
        input_data[feat] = st.slider(feat.replace("_", " ").capitalize(), 1, 10, 5)

# Prediksi saat tombol diklik
if st.button("Prediksi"):
    input_df = pd.DataFrame([input_data])

    # Prediksi dari semua model
    input_scaled = scaler.transform(input_df)
    pred_lr = lr.predict(input_scaled)[0]
    pred_rf = rf.predict(input_df)[0]
    pred_xgb = xgb.predict(input_df)[0]
    pred_lgbm = lgbm.predict(input_df)[0]

    st.subheader("Hasil Prediksi:")
    st.write(f"Linear Regression: **{pred_lr:.2f}**")
    st.write(f"Random Forest: **{pred_rf:.2f}**")
    st.write(f"XGBoost: **{pred_xgb:.2f}**")
    st.write(f"LightGBM: **{pred_lgbm:.2f}**")

    # Tambahkan perbandingan visual
    st.bar_chart({
        "Linear Regression": pred_lr,
        "Random Forest": pred_rf,
        "XGBoost": pred_xgb,
        "LightGBM": pred_lgbm
    })